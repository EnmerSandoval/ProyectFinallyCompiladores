
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.proyectfinal.cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import classes.type.charts.*;
import classes.type.*;
import classes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\051\003\000\002\053" +
    "\043\000\002\053\042\000\002\054\006\000\002\055\012" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\003\006\000\002\004\003\000\002" +
    "\004\003\000\002\005\006\000\002\005\004\000\002\006" +
    "\006\000\002\006\004\000\002\007\005\000\002\007\003" +
    "\000\002\010\013\000\002\011\005\000\002\011\003\000" +
    "\002\012\016\000\002\013\003\000\002\013\003\000\002" +
    "\014\006\000\002\014\004\000\002\015\006\000\002\015" +
    "\004\000\002\016\005\000\002\016\003\000\002\017\005" +
    "\000\002\017\003\000\002\020\013\000\002\021\017\000" +
    "\002\022\003\000\002\022\003\000\002\023\010\000\002" +
    "\024\006\000\002\024\004\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\003\000\002\027\013" +
    "\000\002\030\023\000\002\031\003\000\002\031\003\000" +
    "\002\032\006\000\002\032\004\000\002\033\007\000\002" +
    "\033\004\000\002\034\005\000\002\034\003\000\002\035" +
    "\005\000\002\035\003\000\002\036\015\000\002\037\017" +
    "\000\002\040\005\000\002\040\003\000\002\042\005\000" +
    "\002\042\003\000\002\043\013\000\002\044\017\000\002" +
    "\045\011\000\002\046\004\000\002\057\016\000\002\047" +
    "\017\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\004\004\004\001\002\000\004\014\010\001" +
    "\002\000\004\002\000\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\010\011\001\002\000" +
    "\004\012\012\001\002\000\004\011\013\001\002\000\006" +
    "\015\015\016\014\001\002\000\004\010\u0149\001\002\000" +
    "\004\010\u0146\001\002\000\004\016\017\001\002\000\004" +
    "\010\020\001\002\000\004\006\021\001\002\000\004\012" +
    "\022\001\002\000\004\007\023\001\002\000\004\011\024" +
    "\001\002\000\004\017\025\001\002\000\004\010\026\001" +
    "\002\000\004\004\027\001\002\000\004\014\030\001\002" +
    "\000\004\010\031\001\002\000\004\012\032\001\002\000" +
    "\004\005\033\001\002\000\004\011\034\001\002\000\004" +
    "\020\035\001\002\000\004\010\u013f\001\002\000\004\021" +
    "\037\001\002\000\004\010\040\001\002\000\004\013\041" +
    "\001\002\000\004\011\042\001\002\000\004\022\043\001" +
    "\002\000\004\010\044\001\002\000\004\012\045\001\002" +
    "\000\004\011\046\001\002\000\004\023\047\001\002\000" +
    "\004\010\050\001\002\000\004\012\051\001\002\000\004" +
    "\004\053\001\002\000\004\002\uffff\001\002\000\004\024" +
    "\u013c\001\002\000\004\004\063\001\002\000\010\005\uffef" +
    "\007\uffef\011\u0132\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\uffe9\001\002\000\006\007\uffca\011\u0128\001\002" +
    "\000\004\007\u0124\001\002\000\006\007\uffcc\011\u011a\001" +
    "\002\000\012\025\312\030\313\033\315\050\314\001\002" +
    "\000\004\007\273\001\002\000\004\007\270\001\002\000" +
    "\004\002\uffea\001\002\000\004\002\ufff6\001\002\000\004" +
    "\007\250\001\002\000\004\002\ufff9\001\002\000\006\007" +
    "\uffe3\011\234\001\002\000\004\002\ufffa\001\002\000\004" +
    "\002\ufff8\001\002\000\004\007\231\001\002\000\004\007" +
    "\224\001\002\000\004\002\uffd3\001\002\000\006\007\uffd8" +
    "\011\221\001\002\000\004\002\uffd2\001\002\000\004\007" +
    "\uffec\001\002\000\006\007\uffe1\011\202\001\002\000\004" +
    "\007\175\001\002\000\006\007\uffd6\011\152\001\002\000" +
    "\004\002\ufff5\001\002\000\004\011\134\001\002\000\006" +
    "\005\113\007\114\001\002\000\004\002\uffde\001\002\000" +
    "\004\002\uffdd\001\002\000\004\002\ufff3\001\002\000\004" +
    "\053\115\001\002\000\004\010\120\001\002\000\004\005" +
    "\117\001\002\000\004\002\ufff4\001\002\000\004\004\121" +
    "\001\002\000\004\014\122\001\002\000\004\012\123\001" +
    "\002\000\004\054\124\001\002\000\004\010\125\001\002" +
    "\000\004\012\126\001\002\000\004\055\127\001\002\000" +
    "\004\010\130\001\002\000\004\012\131\001\002\000\004" +
    "\005\132\001\002\000\004\005\133\001\002\000\004\005" +
    "\uffbe\001\002\000\004\004\135\001\002\000\004\025\137" +
    "\001\002\000\004\007\uffed\001\002\000\004\010\140\001" +
    "\002\000\004\012\141\001\002\000\004\011\142\001\002" +
    "\000\004\026\143\001\002\000\004\010\144\001\002\000" +
    "\004\046\145\001\002\000\004\027\146\001\002\000\004" +
    "\010\147\001\002\000\004\013\150\001\002\000\004\005" +
    "\151\001\002\000\004\011\uffeb\001\002\000\004\004\153" +
    "\001\002\000\004\033\155\001\002\000\004\007\uffd7\001" +
    "\002\000\004\010\156\001\002\000\004\046\157\001\002" +
    "\000\004\011\160\001\002\000\004\034\161\001\002\000" +
    "\004\010\162\001\002\000\004\046\163\001\002\000\004" +
    "\011\164\001\002\000\004\047\165\001\002\000\004\010" +
    "\166\001\002\000\004\046\167\001\002\000\004\011\170" +
    "\001\002\000\004\027\171\001\002\000\004\010\172\001" +
    "\002\000\004\013\173\001\002\000\004\005\174\001\002" +
    "\000\006\007\uffd4\011\uffd4\001\002\000\006\005\177\053" +
    "\115\001\002\000\004\002\uffd0\001\002\000\004\002\uffc0" +
    "\001\002\000\004\005\201\001\002\000\004\002\uffd1\001" +
    "\002\000\004\004\203\001\002\000\004\030\205\001\002" +
    "\000\004\007\uffe2\001\002\000\004\010\206\001\002\000" +
    "\004\012\207\001\002\000\004\011\210\001\002\000\004" +
    "\026\211\001\002\000\004\010\212\001\002\000\004\046" +
    "\213\001\002\000\004\011\214\001\002\000\004\027\215" +
    "\001\002\000\004\010\216\001\002\000\004\013\217\001" +
    "\002\000\004\005\220\001\002\000\006\007\uffdf\011\uffdf" +
    "\001\002\000\002\001\002\000\004\007\uffd9\001\002\000" +
    "\004\002\uffce\001\002\000\006\005\177\011\225\001\002" +
    "\000\004\053\115\001\002\000\004\005\227\001\002\000" +
    "\004\002\uffcf\001\002\000\004\002\uffda\001\002\000\006" +
    "\005\177\053\115\001\002\000\004\005\233\001\002\000" +
    "\004\002\uffdb\001\002\000\004\004\235\001\002\000\004" +
    "\030\237\001\002\000\004\007\uffe4\001\002\000\004\010" +
    "\240\001\002\000\004\012\241\001\002\000\004\011\242" +
    "\001\002\000\004\026\243\001\002\000\004\010\244\001" +
    "\002\000\004\046\245\001\002\000\004\005\246\001\002" +
    "\000\006\007\uffe0\011\uffe0\001\002\000\004\002\uffe7\001" +
    "\002\000\006\005\177\053\251\001\002\000\004\010\254" +
    "\001\002\000\004\005\253\001\002\000\004\002\uffe8\001" +
    "\002\000\004\004\255\001\002\000\004\014\256\001\002" +
    "\000\004\010\257\001\002\000\004\012\260\001\002\000" +
    "\004\011\261\001\002\000\004\032\262\001\002\000\004" +
    "\010\263\001\002\000\004\012\264\001\002\000\004\005" +
    "\265\001\002\000\004\005\266\001\002\000\004\005\uffbf" +
    "\001\002\000\004\002\uffe5\001\002\000\006\005\177\053" +
    "\251\001\002\000\004\005\272\001\002\000\004\002\uffe6" +
    "\001\002\000\004\053\115\001\002\000\004\005\275\001" +
    "\002\000\004\004\277\001\002\000\004\007\310\001\002" +
    "\000\004\033\300\001\002\000\004\010\301\001\002\000" +
    "\004\046\302\001\002\000\004\011\303\001\002\000\004" +
    "\034\304\001\002\000\004\010\305\001\002\000\004\046" +
    "\306\001\002\000\004\005\307\001\002\000\006\007\uffd5" +
    "\011\uffd5\001\002\000\004\005\177\001\002\000\004\002" +
    "\uffdc\001\002\000\004\010\u0113\001\002\000\004\010\u010d" +
    "\001\002\000\004\010\324\001\002\000\004\010\316\001" +
    "\002\000\004\046\317\001\002\000\004\011\320\001\002" +
    "\000\004\034\321\001\002\000\004\010\322\001\002\000" +
    "\004\046\323\001\002\000\006\005\307\011\164\001\002" +
    "\000\004\012\325\001\002\000\004\011\326\001\002\000" +
    "\004\051\327\001\002\000\004\010\330\001\002\000\004" +
    "\006\331\001\002\000\004\004\333\001\002\000\004\007" +
    "\u010b\001\002\000\004\033\u0104\001\002\000\004\007\371" +
    "\001\002\000\006\007\uffc6\011\356\001\002\000\006\007" +
    "\uffc4\011\337\001\002\000\004\004\340\001\002\000\004" +
    "\033\342\001\002\000\004\007\uffc5\001\002\000\004\010" +
    "\343\001\002\000\004\046\344\001\002\000\004\011\345" +
    "\001\002\000\004\034\346\001\002\000\004\010\347\001" +
    "\002\000\004\046\350\001\002\000\004\011\351\001\002" +
    "\000\004\030\352\001\002\000\004\010\353\001\002\000" +
    "\004\012\354\001\002\000\004\005\355\001\002\000\006" +
    "\007\uffc2\011\uffc2\001\002\000\004\004\360\001\002\000" +
    "\004\007\uffc7\001\002\000\004\033\361\001\002\000\004" +
    "\010\362\001\002\000\004\046\363\001\002\000\004\011" +
    "\364\001\002\000\004\034\365\001\002\000\004\010\366" +
    "\001\002\000\004\046\367\001\002\000\004\005\370\001" +
    "\002\000\006\007\uffc3\011\uffc3\001\002\000\004\011\372" +
    "\001\002\000\004\027\373\001\002\000\004\010\376\001" +
    "\002\000\004\005\375\001\002\000\006\007\uffc8\011\uffc8" +
    "\001\002\000\004\013\377\001\002\000\004\011\u0100\001" +
    "\002\000\004\052\u0101\001\002\000\004\010\u0102\001\002" +
    "\000\004\012\u0103\001\002\000\004\005\uffc1\001\002\000" +
    "\004\010\u0105\001\002\000\004\046\u0106\001\002\000\004" +
    "\011\u0107\001\002\000\004\034\u0108\001\002\000\004\010" +
    "\u0109\001\002\000\004\046\u010a\001\002\000\006\005\370" +
    "\011\351\001\002\000\004\005\u010c\001\002\000\006\007" +
    "\uffc9\011\uffc9\001\002\000\004\012\u010e\001\002\000\004" +
    "\011\u010f\001\002\000\004\026\u0110\001\002\000\004\010" +
    "\u0111\001\002\000\004\046\u0112\001\002\000\006\005\246" +
    "\011\214\001\002\000\004\012\u0114\001\002\000\004\011" +
    "\u0115\001\002\000\004\026\u0116\001\002\000\004\010\u0117" +
    "\001\002\000\004\046\u0118\001\002\000\006\005\u0119\027" +
    "\146\001\002\000\010\005\uffee\007\uffee\011\uffee\001\002" +
    "\000\004\004\u011b\001\002\000\004\050\u011d\001\002\000" +
    "\004\007\uffcd\001\002\000\004\010\u011e\001\002\000\004" +
    "\012\u011f\001\002\000\004\011\u0120\001\002\000\004\051" +
    "\u0121\001\002\000\004\010\u0122\001\002\000\004\006\u0123" +
    "\001\002\000\004\004\360\001\002\000\006\005\177\053" +
    "\115\001\002\000\004\002\ufff1\001\002\000\004\005\u0127" +
    "\001\002\000\004\002\ufff2\001\002\000\004\004\u0129\001" +
    "\002\000\004\050\u012b\001\002\000\004\007\uffcb\001\002" +
    "\000\004\010\u012c\001\002\000\004\012\u012d\001\002\000" +
    "\004\011\u012e\001\002\000\004\051\u012f\001\002\000\004" +
    "\010\u0130\001\002\000\004\006\u0131\001\002\000\004\004" +
    "\340\001\002\000\004\004\u0133\001\002\000\004\025\u0135" +
    "\001\002\000\006\005\ufff0\007\ufff0\001\002\000\004\010" +
    "\u0136\001\002\000\004\012\u0137\001\002\000\004\011\u0138" +
    "\001\002\000\004\026\u0139\001\002\000\004\010\u013a\001" +
    "\002\000\004\046\u013b\001\002\000\004\005\u0119\001\002" +
    "\000\004\010\u013d\001\002\000\004\006\u013e\001\002\000" +
    "\004\004\ufff7\001\002\000\004\004\u0140\001\002\000\004" +
    "\031\u0141\001\002\000\004\010\u0142\001\002\000\004\012" +
    "\u0143\001\002\000\004\005\u0144\001\002\000\004\011\u0145" +
    "\001\002\000\004\021\ufffc\001\002\000\004\012\u0147\001" +
    "\002\000\004\011\u0148\001\002\000\004\016\ufffd\001\002" +
    "\000\004\006\u014a\001\002\000\004\012\u014b\001\002\000" +
    "\004\007\u014c\001\002\000\004\011\u014d\001\002\000\004" +
    "\017\u014e\001\002\000\004\010\u014f\001\002\000\004\004" +
    "\u0150\001\002\000\004\014\u0151\001\002\000\004\010\u0152" +
    "\001\002\000\004\012\u0153\001\002\000\004\005\u0154\001" +
    "\002\000\004\011\u0155\001\002\000\004\020\035\001\002" +
    "\000\004\021\u0157\001\002\000\004\010\u0158\001\002\000" +
    "\004\013\u0159\001\002\000\004\011\u015a\001\002\000\004" +
    "\022\u015b\001\002\000\004\010\u015c\001\002\000\004\012" +
    "\u015d\001\002\000\004\011\u015e\001\002\000\004\023\u015f" +
    "\001\002\000\004\010\u0160\001\002\000\004\012\u0161\001" +
    "\002\000\004\004\053\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\006\051\005\053\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\051\003\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\004\055" +
    "\005\066\006\105\007\107\010\054\011\060\012\106\013" +
    "\072\014\065\015\056\016\067\017\064\020\071\021\102" +
    "\022\070\023\110\024\111\025\063\026\074\027\077\030" +
    "\104\031\073\032\076\033\100\034\103\035\075\036\061" +
    "\037\057\056\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u0124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\227\001\001\000\004\046\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\135\012\106\056\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\153\030\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\203\021" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\235\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\273\001\001" +
    "\000\002\001\001\000\006\025\275\027\077\001\001\000" +
    "\004\046\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\040\331\042\333\043\334" +
    "\044\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\340\044\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\356\043\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\u011b\036\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\331\043\334\001\001\000\004\047\u0125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\u0129\037\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\333\044\335\001\001\000\006\007\u0133\010\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\u0161\003\053\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




String Errores;

    public void syntax_error(Symbol cur_token) {
        StringBuilder error = new StringBuilder();
        error.append("ERROR SINTACTICO EN : ").append(symbl_name_from_id(cur_token.sym)).append("\n");
        error.append("Linea ").append(cur_token.left).append("\n");
        error.append("Columna ").append(cur_token.right).append("\n");
        if (cur_token.value != null) {
                error.append("Lexema: ").append(cur_token.value).append("\n");
        }

        Errores=error.toString();
        System.out.println(error.toString());
    }

    private String quitarComillas(String identificador){
            return identificador.replace("\"", "").replace("\"", "");
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= home EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // home ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("home",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= LLAVECORCHETEA TITLE DOSPUNTOS WORD COMMA description KEYWORDS DOSPUNTOS CORCHETEA WORD CORCHETEC COMMA HEADER DOSPUNTOS LLAVECORCHETEA TITLE DOSPUNTOS WORD LLAVECORCHETEC COMMA footer BACKGROUNDCOLOR DOSPUNTOS COLORWORD COMMA FONTFAMILY DOSPUNTOS WORD COMMA FONTSIZE DOSPUNTOS WORD typesGraphs 
            {
              Object RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-29)).value;
		int descriptionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).left;
		int descriptionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).right;
		String description = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-27)).value;
		int wordsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int wordsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object words = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int footerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int footerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String footer = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= LLAVECORCHETEA TITLE DOSPUNTOS WORD COMMA KEYWORDS DOSPUNTOS CORCHETEA WORD CORCHETEC COMMA HEADER DOSPUNTOS LLAVECORCHETEA TITLE DOSPUNTOS WORD LLAVECORCHETEC COMMA footer BACKGROUNDCOLOR DOSPUNTOS COLORWORD COMMA FONTFAMILY DOSPUNTOS WORD COMMA FONTSIZE DOSPUNTOS WORD typesGraphs 
            {
              Object RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-28)).value;
		int wordsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int wordsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object words = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int footerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int footerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String footer = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // description ::= DESCRIPTION DOSPUNTOS WORD COMMA 
            {
              String RESULT =null;
		int descriptionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int descriptionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object description = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = quitarComillas(description.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("description",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // footer ::= FOOTER DOSPUNTOS LLAVECORCHETEA COPYRIGHT DOSPUNTOS WORD LLAVECORCHETEC COMMA 
            {
              String RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = quitarComillas(word.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("footer",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typesGraphs ::= dataStructure barGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typesGraphs",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // typesGraphs ::= dataStructure cakeGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typesGraphs",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typesGraphs ::= dataStructure pointsGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typesGraphs",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // typesGraphs ::= dataStructure lineGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typesGraphs",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dataStructure ::= LLAVECORCHETEA DATA DOSPUNTOS CORCHETEA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataStructure",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // barGraph ::= barGraphCategory 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barGraph",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // barGraph ::= barGraphColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barGraph",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // barGraphCategory ::= categoriesBarGraph CORCHETEC charts LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barGraphCategory",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // barGraphCategory ::= categoriesBarGraph LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barGraphCategory",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // barGraphColor ::= categoriesColors CORCHETEC charts LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barGraphColor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // barGraphColor ::= categoriesColors endStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("barGraphColor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // categoriesBarGraph ::= categoryOnly COMMA categoriesBarGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("categoriesBarGraph",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // categoriesBarGraph ::= categoryOnly 
            {
              Object RESULT =null;
		int categoryOnlyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int categoryOnlyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object categoryOnly = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("categoriesBarGraph",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // categoryOnly ::= LLAVECORCHETEA CATEGORY DOSPUNTOS WORD COMMA VALUE DOSPUNTOS NUMBER LLAVECORCHETEC 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("categoryOnly",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // categoriesColors ::= categoryColorOnly COMMA categoriesColors 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("categoriesColors",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // categoriesColors ::= categoriesColorOnly 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("categoriesColors",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // categoryColorOnly ::= LLAVECORCHETEA CATEGORY DOSPUNTOS WORD COMMA VALUE DOSPUNTOS NUMBER COLOR DOSPUNTOS COLORWORD LLAVECORCHETEC 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colorWordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorWordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object colorWord = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("categoryColorOnly",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cakeGraph ::= cakeGraphNormal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cakeGraph",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cakeGraph ::= cakeGraphColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cakeGraph",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cakeGraphNormal ::= graphCakes CORCHETEC chartCake LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cakeGraphNormal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cakeGraphNormal ::= graphCakes endStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cakeGraphNormal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cakeGraphColor ::= graphCakesColor CORCHETEC chartCake LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cakeGraphColor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cakeGraphColor ::= graphCakesColor endStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cakeGraphColor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // graphCakes ::= graphCakeOnly COMMA graphCakes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphCakes",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // graphCakes ::= graphCakeOnly 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphCakes",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // graphCakesColor ::= graphCakeColorOnly COMMA graphCakesColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphCakesColor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // graphCakesColor ::= graphCakeColorOnly 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphCakesColor",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // graphCakeOnly ::= LLAVECORCHETEA LABEL DOSPUNTOS WORD COMMA VALUE DOSPUNTOS NUMBER LLAVECORCHETEC 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = quitarComillas(word.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphCakeOnly",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // graphCakeColorOnly ::= LLAVECORCHETEA LABEL DOSPUNTOS WORD COMMA VALUE DOSPUNTOS NUMBER COMMA COLOR DOSPUNTOS COLORWORD LLAVECORCHETEC 
            {
              Object RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object word = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int colorWordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorWordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object colorWord = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphCakeColorOnly",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pointsGraph ::= graphPointsStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsGraph",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pointsGraph ::= graphPointsColorStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsGraph",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // graphPointsStructure ::= graphPointsNormal CORCHETEC charts LLAVECORCHETEC graphPointsNormal endStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPointsStructure",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // graphPointsColorStructure ::= graphPointsColorPlus CORCHETEC charts LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPointsColorStructure",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // graphPointsColorStructure ::= graphPointsColorPlus endStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPointsColorStructure",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // graphPointsNormal ::= graphPoints COMMA graphsPoints 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPointsNormal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // graphPointsNormal ::= graphPoints 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPointsNormal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // graphPointsColorPlus ::= graphPointsColor COMMA graphPointsColorPlus 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPointsColorPlus",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // graphPointsColorPlus ::= graphPointsColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPointsColorPlus",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // graphPoints ::= LLAVECORCHETEA X DOSPUNTOS NUMBER COMMA Y DOSPUNTOS NUMBER LLAVECORCHETEC 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPoints",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // graphPointsColor ::= LLAVECORCHETEA X DOSPUNTOS NUMBER COMMA Y DOSPUNTOS NUMBER COMMA SIZE DOSPUNTOS NUMBER COMMA COLOR DOSPUNTOS COLORWORD LLAVECORCHETEC 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphPointsColor",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lineGraph ::= structureNormalLine 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineGraph",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lineGraph ::= structureColorLine 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lineGraph",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // structureNormalLine ::= pointsLineStructureR CORCHETEC charts LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structureNormalLine",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // structureNormalLine ::= pointsLineStructureR endStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structureNormalLine",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // structureColorLine ::= pointsColorStructureR CORCHETEC COMMA charts LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structureColorLine",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // structureColorLine ::= pointsColorStructureR endStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structureColorLine",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // pointsLineStructureR ::= pointsLineStructure COMMA pointsLineStructureR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsLineStructureR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pointsLineStructureR ::= pointsLineStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsLineStructureR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pointsColorStructureR ::= pointsLineColorStructure COMMA pointsColorStructureR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsColorStructureR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pointsColorStructureR ::= pointsLineColorStructure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsColorStructureR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // pointsLineStructure ::= LLAVECORCHETEA NAME DOSPUNTOS WORD COMMA POINTS DOSPUNTOS CORCHETEA pointsLine CORCHETEC LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsLineStructure",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pointsLineColorStructure ::= LLAVECORCHETEA NAME DOSPUNTOS WORD COMMA POINTS DOSPUNTOS CORCHETEA pointsLineColor CORCHETEC COMMA colorGraphLine LLAVECORCHETEC 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int pointLineColorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pointLineColorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object pointLineColor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int colorGraphLineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorGraphLineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object colorGraphLine = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsLineColorStructure",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // pointsLine ::= pointsGraphLine COMMA pointsLine 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsLine",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pointsLine ::= pointsGraphLine 
            {
              Object RESULT =null;
		int pointsGraphLineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pointsGraphLineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pointsGraphLine = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsLine",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pointsLineColor ::= graphLineColor COMMA pointsLineColor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsLineColor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pointsLineColor ::= graphLineColor 
            {
              Object RESULT =null;
		int graphLineColorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int graphLineColorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object graphLineColor = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsLineColor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pointsGraphLine ::= LLAVECORCHETEA X DOSPUNTOS NUMBER COMMA Y DOSPUNTOS NUMBER LLAVECORCHETEC 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		CoordinatesLine coordinatesLine = new CoordinatesLine();
                coordinatesLine.setX(x.toString());
                coordinatesLine.setY(y.toString());
                RESULT = coordinatesLine;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointsGraphLine",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // graphLineColor ::= LLAVECORCHETEA X DOSPUNTOS NUMBER COMMA Y DOSPUNTOS NUMBER COMMA LABEL DOSPUNTOS WORD LLAVECORCHETEC 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object punto = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		CoordinatesLine coordinatesLine = new CoordinatesLine();
                coordinatesLine.setX(x.toString());
                coordinatesLine.setY(y.toString());
                coordinatesLine.setLabel(punto.toString());
                RESULT = coordinatesLine;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphLineColor",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // colorGraphLine ::= COLOR DOSPUNTOS COLORWORD COMMA LINESTYLE DOSPUNTOS WORD 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lineStyleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineStyleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lineStyle = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LineSeries lineSeries = new LineSeries();
            lineSeries.setColor(quitarComillas(color.toString()));
            lineSeries.setLineStyle(quitarComillas(lineStyle.toString()));
            RESULT = lineSeries;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colorGraphLine",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // endStructure ::= CORCHETEC LLAVECORCHETEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endStructure",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // chartCake ::= CHART DOSPUNTOS LLAVECORCHETEA TITLE DOSPUNTOS WORD COMMA LEGENDPOSITION DOSPUNTOS WORD LLAVECORCHETEC LLAVECORCHETEC 
            {
              String RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int legendPositionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int legendPositionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object legendPosition = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        ChartCake chartCake = new ChartCake(quitarComillas(title.toString()), quitarComillas(legendPosition.toString()));
        RESULT = chartCake;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chartCake",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // charts ::= CHART DOSPUNTOS LLAVECORCHETEA TITLE WORD XAXISLABEL DOSPUNTOS WORD YAXISLABEL DOSPUNTOS WORD LLAVECORCHETEC LLAVECORCHETEC 
            {
              Object RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xAxisLabelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xAxisLabelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object xAxisLabel = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yAxisLabelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yAxisLabelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object yAxisLabel = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Chart chart = new Chart(quitarComillas(title,toString()), quitarComillas(xAxisLabel.toString()), quitarComillas(yAxisLabel.toString()));
        RESULT = chart;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("charts",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conditionals ::= EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionals",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conditionals ::= DIFFERENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionals",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditionals ::= GREATER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionals",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditionals ::= LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionals",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conditionals ::= GREATEREQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionals",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conditionals ::= LESSEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionals",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
