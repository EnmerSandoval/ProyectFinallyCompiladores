// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

package com.example.proyectfinal.flex;

import java.util.ArrayList;
import java_cup.runtime;import kotlinx.coroutines.internal.Symbol;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\u10cf\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\2\1\3\1\4\10\0"+
    "\1\5\3\0\12\6\1\7\1\0\1\10\1\11\1\12"+
    "\2\0\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\0\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\0\1\44\3\0\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\45\1\0\1\46\7\0\1\1\32\0\1\1"+
    "\217\0\2\23\115\0\1\33\u0200\0\1\1\177\0\13\1"+
    "\35\0\2\1\5\0\1\1\57\0\1\1\312\0\1\24"+
    "\325\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\6\1\1\10\1\11\1\12\1\13\1\14"+
    "\15\0\1\15\1\16\3\0\1\17\2\0\1\20\16\0"+
    "\1\21\2\0\1\22\21\0\1\23\1\0\1\24\20\0"+
    "\1\25\1\26\4\0\1\27\10\0\1\30\5\0\1\31"+
    "\6\0\1\32\1\0\1\33\1\34\6\0\1\35\1\36"+
    "\2\0\1\37\10\0\1\40\2\0\1\41\1\42\7\0"+
    "\1\43\2\0\1\44\6\0\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\47\0\303\0\47"+
    "\0\47\0\352\0\47\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad"+
    "\0\u01d4\0\47\0\47\0\47\0\47\0\47\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\u0381\0\u03a8\0\u03cf\0\47\0\47\0\u03f6\0\u041d\0\u0444"+
    "\0\47\0\u046b\0\u0492\0\47\0\u04b9\0\u04e0\0\u0507\0\u052e"+
    "\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666"+
    "\0\u068d\0\u06b4\0\47\0\u06db\0\u0702\0\47\0\u0729\0\u0750"+
    "\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888"+
    "\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\47"+
    "\0\u09c0\0\47\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa"+
    "\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2"+
    "\0\u0c09\0\u0c30\0\47\0\47\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc"+
    "\0\47\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd"+
    "\0\u0e04\0\47\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\47"+
    "\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\47\0\u0fd8"+
    "\0\47\0\47\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\47\0\47\0\u10e9\0\u1110\0\47\0\u1137\0\u115e\0\u1185"+
    "\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248\0\47\0\u126f\0\u1296"+
    "\0\47\0\47\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380"+
    "\0\u13a7\0\47\0\u13ce\0\u13f5\0\47\0\u141c\0\u1443\0\u146a"+
    "\0\u1491\0\u14b8\0\u14df\0\47\0\47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\3\2\1\14\1\15\1\16\2\2"+
    "\1\17\10\2\1\20\2\2\1\21\3\2\1\22\1\23"+
    "\1\24\1\25\50\0\1\3\56\0\1\26\35\0\3\27"+
    "\1\0\1\30\7\27\1\31\1\32\1\33\1\27\1\34"+
    "\1\27\1\35\1\27\1\36\1\37\5\27\1\40\1\41"+
    "\1\27\1\42\10\27\6\0\1\7\22\0\1\43\26\0"+
    "\1\44\65\0\1\45\43\0\1\46\34\0\1\47\14\0"+
    "\1\50\36\0\1\51\60\0\1\52\36\0\1\53\24\0"+
    "\3\27\1\54\46\27\1\54\2\27\1\55\4\27\6\55"+
    "\31\27\1\54\7\27\1\56\36\27\1\54\7\27\1\57"+
    "\14\27\1\60\21\27\1\54\7\27\1\61\3\27\1\62"+
    "\32\27\1\54\24\27\1\63\21\27\1\54\13\27\1\64"+
    "\32\27\1\54\13\27\1\65\32\27\1\54\7\27\1\66"+
    "\3\27\1\67\32\27\1\54\17\27\1\70\26\27\1\54"+
    "\17\27\1\71\26\27\1\54\7\27\1\72\33\27\40\0"+
    "\1\73\41\0\1\74\40\0\1\75\53\0\1\76\51\0"+
    "\1\77\34\0\1\100\23\0\3\27\1\54\2\27\1\101"+
    "\4\27\6\101\31\27\1\54\11\27\1\102\34\27\1\54"+
    "\30\27\1\103\15\27\1\54\21\27\1\104\24\27\1\54"+
    "\30\27\1\105\15\27\1\54\27\27\1\106\16\27\1\54"+
    "\23\27\1\107\1\110\21\27\1\54\7\27\1\111\36\27"+
    "\1\54\35\27\1\112\10\27\1\54\10\27\1\113\35\27"+
    "\1\54\15\27\1\114\30\27\1\54\36\27\1\115\7\27"+
    "\1\54\30\27\1\116\15\27\1\54\21\27\1\117\21\27"+
    "\17\0\1\120\62\0\1\121\32\0\1\122\54\0\1\123"+
    "\21\0\3\27\1\54\2\27\1\124\4\27\6\124\31\27"+
    "\1\54\20\27\1\125\25\27\1\54\13\27\1\126\32\27"+
    "\1\54\24\27\1\127\21\27\1\54\7\27\1\130\36\27"+
    "\1\54\11\27\1\131\34\27\1\54\30\27\1\132\15\27"+
    "\1\54\30\27\1\133\15\27\1\54\12\27\1\134\33\27"+
    "\1\54\33\27\1\135\12\27\1\54\13\27\1\136\32\27"+
    "\1\54\13\27\1\137\32\27\1\54\13\27\1\140\32\27"+
    "\1\54\21\27\1\141\24\27\1\54\31\27\1\142\11\27"+
    "\17\0\1\143\46\0\1\144\27\0\3\27\1\54\2\27"+
    "\1\145\4\27\6\145\31\27\1\54\15\27\1\146\30\27"+
    "\1\54\15\27\1\147\30\27\1\54\26\27\1\150\17\27"+
    "\1\151\46\27\1\54\26\27\1\152\17\27\1\54\14\27"+
    "\1\153\12\27\1\154\16\27\1\54\13\27\1\155\32\27"+
    "\1\54\13\27\1\156\32\27\1\54\24\27\1\157\21\27"+
    "\1\54\21\27\1\160\24\27\1\54\23\27\1\161\22\27"+
    "\1\162\46\27\1\54\13\27\1\163\32\27\1\54\13\27"+
    "\1\164\32\27\1\54\2\27\1\165\4\27\6\165\31\27"+
    "\1\54\26\27\1\166\17\27\1\54\24\27\1\167\21\27"+
    "\1\170\46\27\1\54\17\27\1\171\26\27\1\54\7\27"+
    "\1\172\36\27\1\54\17\27\1\173\26\27\1\54\26\27"+
    "\1\174\17\27\1\54\26\27\1\175\17\27\1\54\26\27"+
    "\1\176\17\27\1\177\46\27\1\54\12\27\1\200\33\27"+
    "\1\201\46\27\1\202\46\27\1\54\2\27\1\203\4\27"+
    "\6\203\31\27\1\54\24\27\1\204\21\27\1\54\26\27"+
    "\1\205\17\27\1\54\25\27\1\206\20\27\1\54\22\27"+
    "\1\207\23\27\1\54\36\27\1\210\7\27\1\211\46\27"+
    "\1\212\46\27\1\54\12\27\1\213\33\27\1\54\25\27"+
    "\1\214\20\27\1\215\46\27\1\54\31\27\1\216\14\27"+
    "\1\54\35\27\1\217\10\27\1\54\30\27\1\220\15\27"+
    "\1\54\17\27\1\221\26\27\1\54\13\27\1\222\32\27"+
    "\1\54\27\27\1\223\16\27\1\54\24\27\1\224\21\27"+
    "\1\54\23\27\1\225\22\27\1\226\46\27\1\54\17\27"+
    "\1\227\26\27\1\54\21\27\1\230\24\27\1\231\46\27"+
    "\1\232\46\27\1\54\27\27\1\233\16\27\1\54\12\27"+
    "\1\234\33\27\1\54\24\27\1\235\21\27\1\54\35\27"+
    "\1\236\10\27\1\54\17\27\1\237\26\27\1\54\11\27"+
    "\1\240\34\27\1\54\23\27\1\241\22\27\1\242\46\27"+
    "\1\54\30\27\1\243\15\27\1\54\24\27\1\244\21\27"+
    "\1\245\46\27\1\54\17\27\1\246\26\27\1\54\21\27"+
    "\1\247\24\27\1\54\24\27\1\250\21\27\1\54\24\27"+
    "\1\251\21\27\1\54\23\27\1\252\22\27\1\54\26\27"+
    "\1\253\17\27\1\254\46\27\1\255\43\27";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5382];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\2\11\1\1\1\11"+
    "\6\1\5\11\15\0\2\11\3\0\1\11\2\0\1\11"+
    "\16\0\1\11\2\0\1\11\21\0\1\11\1\0\1\11"+
    "\20\0\2\11\4\0\1\11\10\0\1\11\5\0\1\11"+
    "\6\0\1\11\1\0\2\11\6\0\2\11\2\0\1\11"+
    "\10\0\1\11\2\0\2\11\7\0\1\11\2\0\1\11"+
    "\6\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    ArrayList<String> errors = new ArrayList<>();
    private void addErrors(String error){
        error = yytext() +yyline, yycolumn();
        errors.add(error);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addErrors(yytext());
            }
          // fall through
          case 39: break;
          case 2:
            { /*  */
            }
          // fall through
          case 40: break;
          case 3:
            { return new Symbol(ParserSym.COMMA, yycolumn, yyline, yytext());
            }
          // fall through
          case 41: break;
          case 4:
            { return new Symbol(ParserSym.NUMBER, yycolumn, yyline, yytext());
            }
          // fall through
          case 42: break;
          case 5:
            { return new Symbol(ParserSym.DOSPUNTOS, yycolumn, yyline, yytext());
            }
          // fall through
          case 43: break;
          case 6:
            { return new Symbol(ParserSym.LESS, yycolumn, yyline, yytext());
            }
          // fall through
          case 44: break;
          case 7:
            { return new Symbol(ParserSym.GREATER, yycolumn, yyline, yytext());
            }
          // fall through
          case 45: break;
          case 8:
            { return new Symbol(ParserSym.CORCHETEA, yycolumn, yyline, yytext());
            }
          // fall through
          case 46: break;
          case 9:
            { return new Symbol(ParserSym.CORCHETEC, yycolumn, yyline, yytext());
            }
          // fall through
          case 47: break;
          case 10:
            { return new Symbol(ParserSym.LLAVECORCHETEA, yycolumn, yyline, yytext());
            }
          // fall through
          case 48: break;
          case 11:
            { return new Symbol(ParserSym.LLAVECORCHETEC, yycolumn, yyline, yytext());
            }
          // fall through
          case 49: break;
          case 12:
            { return new Symbol(ParserSym.DIFFERENT, yycolumn, yyline, yytext());
            }
          // fall through
          case 50: break;
          case 13:
            { return new Symbol(ParserSym.EQUALS, yycolumn, yyline, yytext());
            }
          // fall through
          case 51: break;
          case 14:
            { return new Symbol(ParserSym.DO, yycolumn, yyline, yytext());
            }
          // fall through
          case 52: break;
          case 15:
            { return new Symbol(ParserSym.IF, yycolumn, yyline, yytext());
            }
          // fall through
          case 53: break;
          case 16:
            { return new Symbol(ParserSym.WORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 54: break;
          case 17:
            { return new Symbol(ParserSym.SIZEPX, yycolumn, yyline, yytext());
            }
          // fall through
          case 55: break;
          case 18:
            { return new Symbol(ParserSym.FOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 56: break;
          case 19:
            { return new Symbol(ParserSym.ELSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 57: break;
          case 20:
            { return new Symbol(ParserSym.TRUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 58: break;
          case 21:
            { return new Symbol(ParserSym.FALSE, yycolumn, yyline, yytext());
            }
          // fall through
          case 59: break;
          case 22:
            { return new Symbol(ParserSym.WHILE, yycolumn, yyline, yytext());
            }
          // fall through
          case 60: break;
          case 23:
            { return new Symbol(ParserSym.DATA, yycolumn, yyline, yytext());
            }
          // fall through
          case 61: break;
          case 24:
            { return new Symbol(ParserSym.SIZE, yycolumn, yyline, yytext());
            }
          // fall through
          case 62: break;
          case 25:
            { return new Symbol(ParserSym.COLOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 63: break;
          case 26:
            { return new Symbol(ParserSym.LABEL, yycolumn, yyline, yytext());
            }
          // fall through
          case 64: break;
          case 27:
            { return new Symbol(ParserSym.TITLE, yycolumn, yyline, yytext());
            }
          // fall through
          case 65: break;
          case 28:
            { return new Symbol(ParserSym.VALUE, yycolumn, yyline, yytext());
            }
          // fall through
          case 66: break;
          case 29:
            { return new Symbol(ParserSym.FOOTER, yycolumn, yyline, yytext());
            }
          // fall through
          case 67: break;
          case 30:
            { return new Symhol(ParserSym.HEADER, yycolumn, yyline, yytext());
            }
          // fall through
          case 68: break;
          case 31:
            { return new Symbol(ParserSym.COLORWORD, yycolumn, yyline, yytext());
            }
          // fall through
          case 69: break;
          case 32:
            { return new Symbol(ParserSym.CATEGORY, yycolumn, yyline, yytext());
            }
          // fall through
          case 70: break;
          case 33:
            { return new Symbol(ParserSym.FONTSIZE, yycolumn, yyline, yytext());
            }
          // fall through
          case 71: break;
          case 34:
            { return new Symbol(ParserSym.KEYWORDS, yycolumn, yyline, yytext());
            }
          // fall through
          case 72: break;
          case 35:
            { return new Symbol(ParserSym.FONTFAMILY, yycolumn, yyline, yytext());
            }
          // fall through
          case 73: break;
          case 36:
            { return new Symbol(ParserSym.DESCRIPTION, yycolumn, yyline, yytext());
            }
          // fall through
          case 74: break;
          case 37:
            { return new Symbol(ParserSym.LEGENDPOSITION, yycolumn, yyline, yytext());
            }
          // fall through
          case 75: break;
          case 38:
            { return new Symbol(ParserSym.BACKGROUNDCOLOR, yycolumn, yyline, yytext());
            }
          // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
